/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.common.collect.ImmutableList;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "VulnerablecomponentsdetectorDetector",
    version = "0.1",
    description = "Detects VulnerableComponentsDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = VulnerablecomponentsdetectorDetectorBootstrapModule.class)
public final class VulnerablecomponentsdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public VulnerablecomponentsdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Vulnerablecomponentsdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("User-Agent", "Mozilla/5.0 (compatible; Tsunami)")
            .build();

        // Test 1: Check for package.json.bak file
        HttpResponse packageResponse = httpClient.send(
            HttpRequest.get(targetUri + "/package.json.bak")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (packageResponse.status().code() == 200) {
            String packageContent = packageResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            // Check for vulnerable dependencies
            if (packageContent.contains("sanitize-html") && packageContent.contains("1.4.2") ||
                packageContent.contains("express-jwt") && packageContent.contains("0.1.3") ||
                packageContent.contains("epilogue-js") ||
                packageContent.contains("eslint-scope") && packageContent.contains("3.7.2")) {
                successfulAttacks++;
            }
        }

        // Test 2: Check for 3rdpartylicenses.txt
        HttpResponse licensesResponse = httpClient.send(
            HttpRequest.get(targetUri + "/3rdpartylicenses.txt")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (licensesResponse.status().code() == 200) {
            String licensesContent = licensesResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            if (licensesContent.contains("anuglar2-qrcode")) {
                successfulAttacks++;
            }
        }

        // Test 3: Check contact form for vulnerable component reporting
        HttpResponse contactResponse = httpClient.send(
            HttpRequest.get(targetUri + "/#/contact")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (contactResponse.status().code() == 200) {
            // Test contact form submission with vulnerable component keywords
            String[] vulnerableKeywords = {"z85", "base85", "base64", "md5", "hashid", 
                                         "sanitize-html", "express-jwt", "epilogue-js", 
                                         "eslint-scope", "anuglar2-qrcode"};
            
            for (String keyword : vulnerableKeywords) {
                try {
                    String postData = "comment=" + URLEncoder.encode("Security issue: " + keyword, StandardCharsets.UTF_8);
                    HttpHeaders postHeaders = HttpHeaders.builder()
                        .addHeader("Content-Type", "application/x-www-form-urlencoded")
                        .addHeader("Accept", "application/json")
                        .build();
                    
                    HttpResponse postResponse = httpClient.send(
                        HttpRequest.post(targetUri + "/api/Feedbacks/")
                            .setHeaders(postHeaders)
                            .setRequestBody(ByteString.copyFromUtf8(postData))
                            .build(),
                        networkService);
                    
                    if (postResponse.status().code() == 201) {
                        String responseBody = postResponse.bodyBytes()
                            .map(bs -> bs.toStringUtf8())
                            .orElse("");
                        
                        // Check if the response indicates successful challenge completion
                        if (responseBody.contains("challenge") || responseBody.contains("solved")) {
                            successfulAttacks++;
                            break; // One successful submission is enough
                        }
                    }
                } catch (IOException e) {
                    // Continue with next keyword
                }
            }
        }

        // Test 4: Check for common vulnerable component indicators in main page
        HttpResponse mainResponse = httpClient.send(
            HttpRequest.get(targetUri)
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (mainResponse.status().code() == 200) {
            String mainContent = mainResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            // Look for indicators of vulnerable components in the main page
            if (mainContent.contains("z85") || mainContent.contains("base64") || 
                mainContent.contains("md5") || mainContent.contains("hashid") ||
                mainContent.contains("sanitize-html") || mainContent.contains("express-jwt") ||
                mainContent.contains("epilogue-js") || mainContent.contains("anuglar2-qrcode")) {
                successfulAttacks++;
            }
        }

        return successfulAttacks > 0;
        
    } catch (IOException e) {
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("VULNERABLECOMPONENTSDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("VulnerableComponentsDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to VulnerableComponentsDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent vulnerable components attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("VULNERABLECOMPONENTSDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("VulnerableComponentsDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to VulnerableComponentsDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent vulnerable components attacks.")
        .build());
  }
}