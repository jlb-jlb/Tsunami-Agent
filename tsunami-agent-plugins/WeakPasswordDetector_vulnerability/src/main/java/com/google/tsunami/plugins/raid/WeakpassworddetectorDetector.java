/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "WeakpassworddetectorDetector",
    version = "0.1",
    description = "Detects WeakPasswordDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = WeakpassworddetectorDetectorBootstrapModule.class)
public final class WeakpassworddetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public WeakpassworddetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Weakpassworddetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        com.google.tsunami.common.net.http.HttpHeaders headers = com.google.tsunami.common.net.http.HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();

        // Test 1: Admin default credentials
        if (testWeakCredentials(targetUri, "admin@juice-sh.op", "admin123", headers, networkService)) {
            successfulAttacks++;
        }

        // Test 2: MC SafeSearch credentials
        if (testWeakCredentials(targetUri, "mc.safesearch@juice-sh.op", "Mr. N00dles", headers, networkService)) {
            successfulAttacks++;
        }

        // Test 3: Amy's credentials with password padding
        if (testWeakCredentials(targetUri, "amy@juice-sh.op", "K1f.....................", headers, networkService)) {
            successfulAttacks++;
        }

        // Test 4: Jim's Star Trek password
        if (testWeakCredentials(targetUri, "jim@juice-sh.op", "ncc-1701", headers, networkService)) {
            successfulAttacks++;
        }

        return successfulAttacks > 0;
    } catch (Exception e) {
        logger.atWarning().log("Weak password test failed on '%s': %s", networkService, e.getMessage());
        return false;
    }
}

private boolean testWeakCredentials(String targetUri, String email, String password, 
                                  com.google.tsunami.common.net.http.HttpHeaders headers, 
                                  NetworkService networkService) {
    try {
        String loginPayload = String.format("{\"email\":\"%s\",\"password\":\"%s\"}", email, password);
        
        HttpResponse loginResponse = httpClient.send(
            HttpRequest.post(targetUri + "/rest/user/login")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(loginPayload))
                .build(),
            networkService);

        if (loginResponse.status().code() == 200) {
            String responseBody = loginResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            // Check for successful authentication indicators
            if (responseBody.contains("\"authentication\"") && 
                responseBody.contains("\"token\"") &&
                !responseBody.contains("Invalid email or password")) {
                return true;
            }
        }
        return false;
    } catch (IOException e) {
        logger.atWarning().log("Login test failed for %s: %s", email, e.getMessage());
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("WEAKPASSWORDDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("WeakPasswordDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to WeakPasswordDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent weak password attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("WEAKPASSWORDDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("WeakPasswordDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to WeakPasswordDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent weak password attacks.")
        .build());
  }
}