/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "KillchatbotdetectorDetector",
    version = "0.1",
    description = "Detects KillChatbotDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = KillchatbotdetectorDetectorBootstrapModule.class)
public final class KillchatbotdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public KillchatbotdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Killchatbotdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
            .build();
        
        // First, check if the chatbot exists by looking for chatbot-related elements
        HttpResponse baselineResponse = httpClient.send(
            HttpRequest.get(targetUri)
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (baselineResponse.status().code() != 200) {
            return false;
        }
        
        String baselineBody = baselineResponse.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Check if chatbot elements are present
        boolean hasChatbot = baselineBody.contains("chatbot") || 
                           baselineBody.contains("chat-bot") ||
                           baselineBody.contains("support-chat") ||
                           baselineBody.contains("bot.js") ||
                           baselineBody.contains("chat.js");
        
        if (!hasChatbot) {
            return false;
        }
        
        // Test 1: Check if disablebot.js file exists
        HttpResponse disableBotResponse = httpClient.send(
            HttpRequest.get(targetUri + "/assets/public/images/uploads/disablebot.js")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (disableBotResponse.status().code() == 200) {
            String disableBotContent = disableBotResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            // Check if the file contains chatbot disabling functionality
            if (disableBotContent.contains("chatbot") || 
                disableBotContent.contains("disable") ||
                disableBotContent.contains("remove") ||
                disableBotContent.contains("hide")) {
                successfulAttacks++;
            }
        }
        
        // Test 2: Try alternative paths for disablebot.js
        String[] alternativePaths = {
            "/assets/images/uploads/disablebot.js",
            "/public/images/uploads/disablebot.js",
            "/uploads/disablebot.js",
            "/assets/disablebot.js",
            "/js/disablebot.js"
        };
        
        for (String path : alternativePaths) {
            HttpResponse altResponse = httpClient.send(
                HttpRequest.get(targetUri + path)
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (altResponse.status().code() == 200) {
                String altContent = altResponse.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                
                if (altContent.contains("chatbot") || 
                    altContent.contains("disable") ||
                    altContent.contains("remove") ||
                    altContent.contains("hide")) {
                    successfulAttacks++;
                    break;
                }
            }
        }
        
        // Test 3: Check for directory traversal to access disablebot.js
        String[] traversalPaths = {
            "/assets/public/images/uploads/../../../disablebot.js",
            "/assets/public/../disablebot.js",
            "/../assets/public/images/uploads/disablebot.js"
        };
        
        for (String traversalPath : traversalPaths) {
            HttpResponse traversalResponse = httpClient.send(
                HttpRequest.get(targetUri + traversalPath)
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (traversalResponse.status().code() == 200) {
                String traversalContent = traversalResponse.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                
                if (traversalContent.contains("chatbot") || 
                    traversalContent.contains("disable") ||
                    traversalContent.contains("remove") ||
                    traversalContent.contains("hide")) {
                    successfulAttacks++;
                    break;
                }
            }
        }
        
        // Test 4: Check if uploads directory is accessible and contains malicious scripts
        HttpResponse uploadsResponse = httpClient.send(
            HttpRequest.get(targetUri + "/assets/public/images/uploads/")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (uploadsResponse.status().code() == 200) {
            String uploadsContent = uploadsResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            if (uploadsContent.contains("disablebot.js") ||
                uploadsContent.contains("Index of") ||
                uploadsContent.contains("Directory listing")) {
                successfulAttacks++;
            }
        }
        
        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("Kill chatbot test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("KILLCHATBOTDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("KillChatbotDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to KillChatbotDetector attacks.")
                .setRecommendation(
                    "Secure the uploads directory, implement proper access controls, validate file uploads, and prevent unauthorized script execution"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("KILLCHATBOTDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("KillChatbotDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to KillChatbotDetector attacks.")
            .setRecommendation(
                "Secure the uploads directory, implement proper access controls, validate file uploads, and prevent unauthorized script execution")
        .build());
  }
}