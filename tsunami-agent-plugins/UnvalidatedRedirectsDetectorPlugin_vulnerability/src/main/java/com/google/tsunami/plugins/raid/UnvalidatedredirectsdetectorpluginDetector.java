/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "UnvalidatedredirectsdetectorpluginDetector",
    version = "0.1",
    description = "Detects UnvalidatedRedirectsDetectorPlugin vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = UnvalidatedredirectsdetectorpluginDetectorBootstrapModule.class)
public final class UnvalidatedredirectsdetectorpluginDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public UnvalidatedredirectsdetectorpluginDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Unvalidatedredirectsdetectorplugin Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
            .build();

        // Test 1: Direct redirect to cryptocurrency address
        String cryptoPayload = "https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm";
        if (testRedirectPayload(targetUri, cryptoPayload, headers, networkService)) {
            successfulAttacks++;
        }

        // Test 2: Bypass allowlist validation with parameter injection
        String bypassPayload = "http://kimminich.de?pwned=https://github.com/juice-shop/juice-shop";
        if (testRedirectPayload(targetUri, bypassPayload, headers, networkService)) {
            successfulAttacks++;
        }

        // Test 3: Direct external redirect to malicious site
        String maliciousPayload = "https://evil.com";
        if (testRedirectPayload(targetUri, maliciousPayload, headers, networkService)) {
            successfulAttacks++;
        }

        // Test 4: Another bypass attempt with different trusted domain
        String anotherBypassPayload = "http://attacker.com?bypass=https://github.com/juice-shop/juice-shop";
        if (testRedirectPayload(targetUri, anotherBypassPayload, headers, networkService)) {
            successfulAttacks++;
        }

        return successfulAttacks > 0;
    } catch (Exception e) {
        logger.atWarning().log(
            format("Unvalidated redirects test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private boolean testRedirectPayload(String targetUri, String payload, HttpHeaders headers, NetworkService networkService) {
    try {
        String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8);
        String redirectUrl = targetUri + "/redirect?to=" + encodedPayload;
        
        HttpResponse response = httpClient.send(
            HttpRequest.get(redirectUrl)
                .setHeaders(headers)
                .build(),
            networkService);

        int statusCode = response.status().code();
        
        // Check for redirect responses (3xx status codes)
        if (statusCode >= 300 && statusCode < 400) {
            // Check Location header for the redirect destination
            String locationHeader = response.headers().get("Location").orElse("");
            
            // If the Location header contains our payload URL, it's vulnerable
            if (locationHeader.contains(payload) || 
                locationHeader.contains(URLEncoder.encode(payload, StandardCharsets.UTF_8))) {
                return true;
            }
        }
        
        // Also check response body for redirect indicators
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
            
        // Look for JavaScript redirects or meta refresh tags
        Pattern jsRedirectPattern = Pattern.compile("window\\.location|document\\.location|location\\.href", Pattern.CASE_INSENSITIVE);
        Pattern metaRefreshPattern = Pattern.compile("<meta[^>]*http-equiv=[\"']refresh[\"'][^>]*>", Pattern.CASE_INSENSITIVE);
        
        if ((jsRedirectPattern.matcher(responseBody).find() || metaRefreshPattern.matcher(responseBody).find()) &&
            responseBody.contains(payload)) {
            return true;
        }
        
        return false;
    } catch (Exception e) {
        logger.atWarning().log(
            format("Failed to test redirect payload '%s': %s", payload, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("UNVALIDATEDREDIRECTSDETECTORPLUGIN_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("UnvalidatedRedirectsDetectorPlugin Vulnerability Exposed")
                .setDescription("The application is vulnerable to UnvalidatedRedirectsDetectorPlugin attacks.")
                .setRecommendation(
                    "Implement proper URL validation and use allowlists for redirect destinations. Validate redirect URLs against a whitelist of trusted domains."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("UNVALIDATEDREDIRECTSDETECTORPLUGIN_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("UnvalidatedRedirectsDetectorPlugin Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to UnvalidatedRedirectsDetectorPlugin attacks.")
            .setRecommendation(
                "Implement proper URL validation and use allowlists for redirect destinations. Validate redirect URLs against a whitelist of trusted domains.")
        .build());
  }
}