/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "VulnerablecomponentsdetectorpluginDetector",
    version = "0.1",
    description = "Detects VulnerableComponentsDetectorPlugin vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = VulnerablecomponentsdetectorpluginDetectorBootstrapModule.class)
public final class VulnerablecomponentsdetectorpluginDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public VulnerablecomponentsdetectorpluginDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Vulnerablecomponentsdetectorplugin Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int vulnerabilityCount = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/plain")
            .addHeader("User-Agent", "Mozilla/5.0 (compatible; TsunamiScanner)")
            .build();
        
        // Test 1: Check for package.json.bak file
        boolean packageJsonBakExists = checkPackageJsonBak(targetUri, headers, networkService);
        
        // Test 2: Check for 3rdpartylicenses.txt file
        boolean thirdPartyLicensesExists = check3rdPartyLicenses(targetUri, headers, networkService);
        
        // Test 3: Check if contact form exists and accepts feedback
        boolean contactFormExists = checkContactForm(targetUri, networkService);
        
        if (packageJsonBakExists) {
            vulnerabilityCount++;
        }
        
        if (thirdPartyLicensesExists) {
            vulnerabilityCount++;
        }
        
        if (contactFormExists && (packageJsonBakExists || thirdPartyLicensesExists)) {
            vulnerabilityCount++;
        }
        
        return vulnerabilityCount > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("Vulnerable components test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private boolean checkPackageJsonBak(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    HttpResponse response = httpClient.send(
        HttpRequest.get(targetUri + "/package.json.bak")
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String body = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Check for vulnerable components indicators
        return body.contains("dependencies") && 
               (body.contains("sanitize-html") || 
                body.contains("express-jwt") || 
                body.contains("epilogue-js") || 
                body.contains("eslint-scope") ||
                body.contains("z85") ||
                body.contains("hashid"));
    }
    return false;
}

private boolean check3rdPartyLicenses(String targetUri, HttpHeaders headers, NetworkService networkService) throws IOException {
    HttpResponse response = httpClient.send(
        HttpRequest.get(targetUri + "/3rdpartylicenses.txt")
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String body = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Check for typosquatted package
        return body.contains("anuglar2-qrcode");
    }
    return false;
}

private boolean checkContactForm(String targetUri, NetworkService networkService) throws IOException {
    HttpHeaders headers = HttpHeaders.builder()
        .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
        .addHeader("User-Agent", "Mozilla/5.0 (compatible; TsunamiScanner)")
        .build();
    
    HttpResponse response = httpClient.send(
        HttpRequest.get(targetUri + "/#/contact")
            .setHeaders(headers)
            .build(),
        networkService);
    
    if (response.status().code() == 200) {
        String body = response.bodyBytes()
            .map(bs -> bs.toStringUtf8())
            .orElse("");
        
        // Check if contact form exists
        return body.contains("contact") || body.contains("feedback") || body.contains("comment");
    }
    return false;
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("VULNERABLECOMPONENTSDETECTORPLUGIN_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("VulnerableComponentsDetectorPlugin Vulnerability Exposed")
                .setDescription("The application is vulnerable to VulnerableComponentsDetectorPlugin attacks.")
                .setRecommendation(
                    "Update vulnerable dependencies, remove typosquatted packages, use secure cryptographic algorithms, and implement supply chain security measures"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("VULNERABLECOMPONENTSDETECTORPLUGIN_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("VulnerableComponentsDetectorPlugin Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to VulnerableComponentsDetectorPlugin attacks.")
            .setRecommendation(
                "Update vulnerable dependencies, remove typosquatted packages, use secure cryptographic algorithms, and implement supply chain security measures")
        .build());
  }
}