/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "BasketaccessmanipulationdetectorDetector",
    version = "0.1",
    description = "Detects BasketAccessManipulationDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = BasketaccessmanipulationdetectorDetectorBootstrapModule.class)
public final class BasketaccessmanipulationdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public BasketaccessmanipulationdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Basketaccessmanipulationdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();
        
        // Test 1: Try to access different basket IDs without authentication
        for (int basketId = 1; basketId <= 5; basketId++) {
            try {
                HttpResponse basketResponse = httpClient.send(
                    HttpRequest.get(targetUri + "/rest/basket/" + basketId)
                        .setHeaders(headers)
                        .build(),
                    networkService);
                
                if (basketResponse.status().code() == 200) {
                    String responseBody = basketResponse.bodyBytes()
                        .map(bs -> bs.toStringUtf8())
                        .orElse("");
                    
                    // Check if we got basket data (indicates unauthorized access)
                    if (responseBody.contains("Products") || responseBody.contains("items") || responseBody.contains("quantity")) {
                        successfulAttacks++;
                        break;
                    }
                }
            } catch (IOException e) {
                // Continue to next test
            }
        }
        
        // Test 2: Try to manipulate basket items with negative quantities
        // First, try to get any existing basket items
        try {
            HttpResponse basketItemsResponse = httpClient.send(
                HttpRequest.get(targetUri + "/api/BasketItems")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (basketItemsResponse.status().code() == 200) {
                String responseBody = basketItemsResponse.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                
                // Extract item ID from response using regex
                Pattern itemIdPattern = Pattern.compile("\"id\"\s*:\s*(\d+)");
                Matcher matcher = itemIdPattern.matcher(responseBody);
                
                if (matcher.find()) {
                    String itemId = matcher.group(1);
                    
                    // Test negative quantity manipulation
                    String negativePayload = "{\"quantity\": -100}";
                    
                    HttpResponse manipulationResponse = httpClient.send(
                        HttpRequest.put(targetUri + "/api/BasketItems/" + itemId)
                            .setHeaders(headers)
                            .setRequestBody(ByteString.copyFromUtf8(negativePayload))
                            .build(),
                        networkService);
                    
                    if (manipulationResponse.status().code() == 200) {
                        String manipulationBody = manipulationResponse.bodyBytes()
                            .map(bs -> bs.toStringUtf8())
                            .orElse("");
                        
                        // Check if negative quantity was accepted
                        if (manipulationBody.contains("-100") || manipulationBody.contains("quantity")) {
                            successfulAttacks++;
                        }
                    }
                }
            }
        } catch (IOException e) {
            // Continue to next test
        }
        
        // Test 3: Try to create basket items with negative quantities
        try {
            String createNegativePayload = "{\"ProductId\": 1, \"BasketId\": 1, \"quantity\": -1}";
            
            HttpResponse createResponse = httpClient.send(
                HttpRequest.post(targetUri + "/api/BasketItems")
                    .setHeaders(headers)
                    .setRequestBody(ByteString.copyFromUtf8(createNegativePayload))
                    .build(),
                networkService);
            
            if (createResponse.status().code() == 200 || createResponse.status().code() == 201) {
                String createBody = createResponse.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                
                // Check if negative quantity item was created
                if (createBody.contains("-1") || createBody.contains("quantity")) {
                    successfulAttacks++;
                }
            }
        } catch (IOException e) {
            // Continue to next test
        }
        
        // Test 4: Try to access basket with session manipulation
        try {
            HttpHeaders sessionHeaders = HttpHeaders.builder()
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .addHeader("Cookie", "bid=1")
                .build();
            
            HttpResponse sessionResponse = httpClient.send(
                HttpRequest.get(targetUri + "/rest/basket")
                    .setHeaders(sessionHeaders)
                    .build(),
                networkService);
            
            if (sessionResponse.status().code() == 200) {
                String sessionBody = sessionResponse.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                
                // Check if we got basket data with manipulated session
                if (sessionBody.contains("Products") || sessionBody.contains("items") || sessionBody.contains("quantity")) {
                    successfulAttacks++;
                }
            }
        } catch (IOException e) {
            // Final test completed
        }
        
        return successfulAttacks > 0;
        
    } catch (Exception e) {
        logger.atWarning().log(
            format("Basket access and manipulation test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("BASKETACCESSMANIPULATIONDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("BasketAccessManipulationDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to BasketAccessManipulationDetector attacks.")
                .setRecommendation(
                    "Implement proper authorization checks to ensure users can only access their own baskets, validate basket item quantities to prevent negative values, and use proper session management"))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("BASKETACCESSMANIPULATIONDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("BasketAccessManipulationDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to BasketAccessManipulationDetector attacks.")
            .setRecommendation(
                "Implement proper authorization checks to ensure users can only access their own baskets, validate basket item quantities to prevent negative values, and use proper session management")
        .build());
  }
}