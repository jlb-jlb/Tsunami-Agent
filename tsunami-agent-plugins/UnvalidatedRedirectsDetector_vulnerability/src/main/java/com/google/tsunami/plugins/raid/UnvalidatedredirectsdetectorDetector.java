/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "UnvalidatedredirectsdetectorDetector",
    version = "0.1",
    description = "Detects UnvalidatedRedirectsDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = UnvalidatedredirectsdetectorDetectorBootstrapModule.class)
public final class UnvalidatedredirectsdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public UnvalidatedredirectsdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Unvalidatedredirectsdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("User-Agent", "Mozilla/5.0 (compatible; TsunamiScanner)")
            .build();

        // Test 1: Basic redirect to external domain
        String payload1 = "http://evil.com";
        HttpResponse response1 = httpClient.send(
            HttpRequest.get(targetUri + "/redirect?to=" + URLEncoder.encode(payload1, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (isRedirectVulnerable(response1, payload1)) {
            successfulAttacks++;
        }

        // Test 2: Redirect with allowlist bypass using parameter injection
        String payload2 = "http://evil.com?pwned=https://github.com/juice-shop/juice-shop";
        HttpResponse response2 = httpClient.send(
            HttpRequest.get(targetUri + "/redirect?to=" + URLEncoder.encode(payload2, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (isRedirectVulnerable(response2, "evil.com")) {
            successfulAttacks++;
        }

        // Test 3: Protocol-relative URL bypass
        String payload3 = "//evil.com";
        HttpResponse response3 = httpClient.send(
            HttpRequest.get(targetUri + "/redirect?to=" + URLEncoder.encode(payload3, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (isRedirectVulnerable(response3, "evil.com")) {
            successfulAttacks++;
        }

        // Test 4: JavaScript redirect bypass
        String payload4 = "javascript:alert('xss')";
        HttpResponse response4 = httpClient.send(
            HttpRequest.get(targetUri + "/redirect?to=" + URLEncoder.encode(payload4, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (isJavaScriptRedirectVulnerable(response4)) {
            successfulAttacks++;
        }

        // Test 5: Data URI bypass
        String payload5 = "data:text/html,<script>alert('xss')</script>";
        HttpResponse response5 = httpClient.send(
            HttpRequest.get(targetUri + "/redirect?to=" + URLEncoder.encode(payload5, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (isDataUriRedirectVulnerable(response5)) {
            successfulAttacks++;
        }

        return successfulAttacks > 0;

    } catch (IOException e) {
        logger.atWarning().log(
            format("Unvalidated redirect test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private boolean isRedirectVulnerable(HttpResponse response, String expectedDomain) {
    int statusCode = response.status().code();
    
    // Check for redirect status codes
    if (statusCode >= 300 && statusCode < 400) {
        String locationHeader = response.headers().get("Location").orElse(null);
        if (locationHeader != null && locationHeader.contains(expectedDomain)) {
            return true;
        }
    }
    
    // Check for meta refresh redirects in response body
    String responseBody = response.bodyBytes()
        .map(bs -> bs.toStringUtf8())
        .orElse("");
    
    Pattern metaRefreshPattern = Pattern.compile(
        "<meta[^>]*http-equiv=[\"']refresh[\"'][^>]*content=[\"'][^\"']*url=([^\"']*)[\"'][^>]*>",
        Pattern.CASE_INSENSITIVE);
    Matcher matcher = metaRefreshPattern.matcher(responseBody);
    
    if (matcher.find()) {
        String redirectUrl = matcher.group(1);
        if (redirectUrl.contains(expectedDomain)) {
            return true;
        }
    }
    
    // Check for JavaScript redirects
    Pattern jsRedirectPattern = Pattern.compile(
        "(window\\.location|location\\.href|location\\.replace)\\s*=\\s*[\"']([^\"']*)[\"']",
        Pattern.CASE_INSENSITIVE);
    Matcher jsMatcher = jsRedirectPattern.matcher(responseBody);
    
    if (jsMatcher.find()) {
        String redirectUrl = jsMatcher.group(2);
        if (redirectUrl.contains(expectedDomain)) {
            return true;
        }
    }
    
    return false;
}

private boolean isJavaScriptRedirectVulnerable(HttpResponse response) {
    String responseBody = response.bodyBytes()
        .map(bs -> bs.toStringUtf8())
        .orElse("");
    
    // Check if JavaScript payload is reflected or executed
    return responseBody.contains("javascript:") || 
           responseBody.contains("alert(") ||
           (response.status().code() == 200 && responseBody.toLowerCase().contains("<script"));
}

private boolean isDataUriRedirectVulnerable(HttpResponse response) {
    int statusCode = response.status().code();
    
    // Check for redirect to data URI
    if (statusCode >= 300 && statusCode < 400) {
        String locationHeader = response.headers().get("Location").orElse(null);
        if (locationHeader != null && locationHeader.startsWith("data:")) {
            return true;
        }
    }
    
    // Check if data URI is reflected in response
    String responseBody = response.bodyBytes()
        .map(bs -> bs.toStringUtf8())
        .orElse("");
    
    return responseBody.contains("data:text/html") && responseBody.contains("<script>");
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("UNVALIDATEDREDIRECTSDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("UnvalidatedRedirectsDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to UnvalidatedRedirectsDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent unvalidated redirects attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("UNVALIDATEDREDIRECTSDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("UnvalidatedRedirectsDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to UnvalidatedRedirectsDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent unvalidated redirects attacks.")
        .build());
  }
}